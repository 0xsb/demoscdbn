package com.cmcc.ms.entity.system;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;



/**
 * The Class SysRolesExample.
 *
 * @author ldy
 */
public class SysRolesExample {
    /**
     * This field was generated by MyBatis Generator. This field corresponds to
     * the database table sys_roles
     * 
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator. This field corresponds to
     * the database table sys_roles
     * 
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator. This field corresponds to
     * the database table sys_roles
     * 
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     * 
     * @mbggenerated
     */
    public SysRolesExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     *
     * @param orderByClause the new order by clause
     * @mbggenerated 
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     *
     * @return the order by clause
     * @mbggenerated 
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     *
     * @param distinct the new distinct
     * @mbggenerated 
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     *
     * @return true, if is distinct
     * @mbggenerated 
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     *
     * @return the ored criteria
     * @mbggenerated 
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     *
     * @param criteria the criteria
     * @mbggenerated 
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     *
     * @return the criteria
     * @mbggenerated 
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     *
     * @return the criteria
     * @mbggenerated 
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     *
     * @return the criteria
     * @mbggenerated 
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_roles
     * 
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to
     * the database table sys_roles
     * 
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {

        /** The criteria. */
        protected List<Criterion> criteria;

        /**
         * Instantiates a new generated criteria.
         */
        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        /**
         * Checks if is valid.
         *
         * @return true, if is valid
         */
        public boolean isValid() {
            return criteria.size() > 0;
        }

        /**
         * Gets the all criteria.
         *
         * @return the all criteria
         */
        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        /**
         * Gets the criteria.
         *
         * @return the criteria
         */
        public List<Criterion> getCriteria() {
            return criteria;
        }

        /**
         * Adds the criterion.
         *
         * @param condition the condition
         */
        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        /**
         * Adds the criterion.
         *
         * @param condition the condition
         * @param value the value
         * @param property the property
         */
        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        /**
         * Adds the criterion.
         *
         * @param condition the condition
         * @param value1 the value 1
         * @param value2 the value 2
         * @param property the property
         */
        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        /**
         * Adds the criterion for JDBC date.
         *
         * @param condition the condition
         * @param value the value
         * @param property the property
         */
        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        /**
         * Adds the criterion for JDBC date.
         *
         * @param condition the condition
         * @param values the values
         * @param property the property
         */
        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property
                        + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        /**
         * Adds the criterion for JDBC date.
         *
         * @param condition the condition
         * @param value1 the value 1
         * @param value2 the value 2
         * @param property the property
         */
        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2,
                                               String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()),
                    new java.sql.Date(value2.getTime()), property);
        }

        /**
         * And role id is null.
         *
         * @return the criteria
         */
        public Criteria andRoleIdIsNull() {
            addCriterion("ROLE_ID is null");
            return (Criteria) this;
        }

        /**
         * And role id is not null.
         *
         * @return the criteria
         */
        public Criteria andRoleIdIsNotNull() {
            addCriterion("ROLE_ID is not null");
            return (Criteria) this;
        }

        /**
         * And role id equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleIdEqualTo(Integer value) {
            addCriterion("ROLE_ID =", value, "roleId");
            return (Criteria) this;
        }

        /**
         * And role id not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleIdNotEqualTo(Integer value) {
            addCriterion("ROLE_ID <>", value, "roleId");
            return (Criteria) this;
        }

        /**
         * And role id greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleIdGreaterThan(Integer value) {
            addCriterion("ROLE_ID >", value, "roleId");
            return (Criteria) this;
        }

        /**
         * And role id greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("ROLE_ID >=", value, "roleId");
            return (Criteria) this;
        }

        /**
         * And role id less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleIdLessThan(Integer value) {
            addCriterion("ROLE_ID <", value, "roleId");
            return (Criteria) this;
        }

        /**
         * And role id less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleIdLessThanOrEqualTo(Integer value) {
            addCriterion("ROLE_ID <=", value, "roleId");
            return (Criteria) this;
        }

        /**
         * And role id in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andRoleIdIn(List<Integer> values) {
            addCriterion("ROLE_ID in", values, "roleId");
            return (Criteria) this;
        }

        /**
         * And role id not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andRoleIdNotIn(List<Integer> values) {
            addCriterion("ROLE_ID not in", values, "roleId");
            return (Criteria) this;
        }

        /**
         * And role id between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andRoleIdBetween(Integer value1, Integer value2) {
            addCriterion("ROLE_ID between", value1, value2, "roleId");
            return (Criteria) this;
        }

        /**
         * And role id not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andRoleIdNotBetween(Integer value1, Integer value2) {
            addCriterion("ROLE_ID not between", value1, value2, "roleId");
            return (Criteria) this;
        }

        /**
         * And role name is null.
         *
         * @return the criteria
         */
        public Criteria andRoleNameIsNull() {
            addCriterion("ROLE_NAME is null");
            return (Criteria) this;
        }

        /**
         * And role name is not null.
         *
         * @return the criteria
         */
        public Criteria andRoleNameIsNotNull() {
            addCriterion("ROLE_NAME is not null");
            return (Criteria) this;
        }

        /**
         * And role name equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleNameEqualTo(String value) {
            addCriterion("ROLE_NAME =", value, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleNameNotEqualTo(String value) {
            addCriterion("ROLE_NAME <>", value, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleNameGreaterThan(String value) {
            addCriterion("ROLE_NAME >", value, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleNameGreaterThanOrEqualTo(String value) {
            addCriterion("ROLE_NAME >=", value, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleNameLessThan(String value) {
            addCriterion("ROLE_NAME <", value, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleNameLessThanOrEqualTo(String value) {
            addCriterion("ROLE_NAME <=", value, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleNameLike(String value) {
            addCriterion("ROLE_NAME like", value, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name not like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleNameNotLike(String value) {
            addCriterion("ROLE_NAME not like", value, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andRoleNameIn(List<String> values) {
            addCriterion("ROLE_NAME in", values, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andRoleNameNotIn(List<String> values) {
            addCriterion("ROLE_NAME not in", values, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andRoleNameBetween(String value1, String value2) {
            addCriterion("ROLE_NAME between", value1, value2, "roleName");
            return (Criteria) this;
        }

        /**
         * And role name not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andRoleNameNotBetween(String value1, String value2) {
            addCriterion("ROLE_NAME not between", value1, value2, "roleName");
            return (Criteria) this;
        }

        /**
         * And role desc is null.
         *
         * @return the criteria
         */
        public Criteria andRoleDescIsNull() {
            addCriterion("ROLE_DESC is null");
            return (Criteria) this;
        }

        /**
         * And role desc is not null.
         *
         * @return the criteria
         */
        public Criteria andRoleDescIsNotNull() {
            addCriterion("ROLE_DESC is not null");
            return (Criteria) this;
        }

        /**
         * And role desc equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleDescEqualTo(String value) {
            addCriterion("ROLE_DESC =", value, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleDescNotEqualTo(String value) {
            addCriterion("ROLE_DESC <>", value, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleDescGreaterThan(String value) {
            addCriterion("ROLE_DESC >", value, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleDescGreaterThanOrEqualTo(String value) {
            addCriterion("ROLE_DESC >=", value, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleDescLessThan(String value) {
            addCriterion("ROLE_DESC <", value, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleDescLessThanOrEqualTo(String value) {
            addCriterion("ROLE_DESC <=", value, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleDescLike(String value) {
            addCriterion("ROLE_DESC like", value, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc not like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andRoleDescNotLike(String value) {
            addCriterion("ROLE_DESC not like", value, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andRoleDescIn(List<String> values) {
            addCriterion("ROLE_DESC in", values, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andRoleDescNotIn(List<String> values) {
            addCriterion("ROLE_DESC not in", values, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andRoleDescBetween(String value1, String value2) {
            addCriterion("ROLE_DESC between", value1, value2, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And role desc not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andRoleDescNotBetween(String value1, String value2) {
            addCriterion("ROLE_DESC not between", value1, value2, "roleDesc");
            return (Criteria) this;
        }

        /**
         * And company is null.
         *
         * @return the criteria
         */
        public Criteria andCompanyIsNull() {
            addCriterion("COMPANY is null");
            return (Criteria) this;
        }

        /**
         * And company is not null.
         *
         * @return the criteria
         */
        public Criteria andCompanyIsNotNull() {
            addCriterion("COMPANY is not null");
            return (Criteria) this;
        }

        /**
         * And company equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCompanyEqualTo(String value) {
            addCriterion("COMPANY =", value, "company");
            return (Criteria) this;
        }

        /**
         * And company not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCompanyNotEqualTo(String value) {
            addCriterion("COMPANY <>", value, "company");
            return (Criteria) this;
        }

        /**
         * And company greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCompanyGreaterThan(String value) {
            addCriterion("COMPANY >", value, "company");
            return (Criteria) this;
        }

        /**
         * And company greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCompanyGreaterThanOrEqualTo(String value) {
            addCriterion("COMPANY >=", value, "company");
            return (Criteria) this;
        }

        /**
         * And company less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCompanyLessThan(String value) {
            addCriterion("COMPANY <", value, "company");
            return (Criteria) this;
        }

        /**
         * And company less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCompanyLessThanOrEqualTo(String value) {
            addCriterion("COMPANY <=", value, "company");
            return (Criteria) this;
        }

        /**
         * And company like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCompanyLike(String value) {
            addCriterion("COMPANY like", value, "company");
            return (Criteria) this;
        }

        /**
         * And company not like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCompanyNotLike(String value) {
            addCriterion("COMPANY not like", value, "company");
            return (Criteria) this;
        }

        /**
         * And company in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andCompanyIn(List<String> values) {
            addCriterion("COMPANY in", values, "company");
            return (Criteria) this;
        }

        /**
         * And company not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andCompanyNotIn(List<String> values) {
            addCriterion("COMPANY not in", values, "company");
            return (Criteria) this;
        }

        /**
         * And company between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andCompanyBetween(String value1, String value2) {
            addCriterion("COMPANY between", value1, value2, "company");
            return (Criteria) this;
        }

        /**
         * And company not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andCompanyNotBetween(String value1, String value2) {
            addCriterion("COMPANY not between", value1, value2, "company");
            return (Criteria) this;
        }

        /**
         * And create date is null.
         *
         * @return the criteria
         */
        public Criteria andCreateDateIsNull() {
            addCriterion("CREATE_DATE is null");
            return (Criteria) this;
        }

        /**
         * And create date is not null.
         *
         * @return the criteria
         */
        public Criteria andCreateDateIsNotNull() {
            addCriterion("CREATE_DATE is not null");
            return (Criteria) this;
        }

        /**
         * And create date equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCreateDateEqualTo(Date value) {
            addCriterionForJDBCDate("CREATE_DATE =", value, "createDate");
            return (Criteria) this;
        }

        /**
         * And create date not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCreateDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("CREATE_DATE <>", value, "createDate");
            return (Criteria) this;
        }

        /**
         * And create date greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCreateDateGreaterThan(Date value) {
            addCriterionForJDBCDate("CREATE_DATE >", value, "createDate");
            return (Criteria) this;
        }

        /**
         * And create date greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCreateDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CREATE_DATE >=", value, "createDate");
            return (Criteria) this;
        }

        /**
         * And create date less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCreateDateLessThan(Date value) {
            addCriterionForJDBCDate("CREATE_DATE <", value, "createDate");
            return (Criteria) this;
        }

        /**
         * And create date less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andCreateDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("CREATE_DATE <=", value, "createDate");
            return (Criteria) this;
        }

        /**
         * And create date in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andCreateDateIn(List<Date> values) {
            addCriterionForJDBCDate("CREATE_DATE in", values, "createDate");
            return (Criteria) this;
        }

        /**
         * And create date not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andCreateDateNotIn(List<Date> values) {
            addCriterionForJDBCDate("CREATE_DATE not in", values, "createDate");
            return (Criteria) this;
        }

        /**
         * And create date between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andCreateDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CREATE_DATE between", value1, value2, "createDate");
            return (Criteria) this;
        }

        /**
         * And create date not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andCreateDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("CREATE_DATE not between", value1, value2, "createDate");
            return (Criteria) this;
        }

        /**
         * And lastwrotime is null.
         *
         * @return the criteria
         */
        public Criteria andLastwrotimeIsNull() {
            addCriterion("LASTWROTIME is null");
            return (Criteria) this;
        }

        /**
         * And lastwrotime is not null.
         *
         * @return the criteria
         */
        public Criteria andLastwrotimeIsNotNull() {
            addCriterion("LASTWROTIME is not null");
            return (Criteria) this;
        }

        /**
         * And lastwrotime equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andLastwrotimeEqualTo(Date value) {
            addCriterionForJDBCDate("LASTWROTIME =", value, "lastwrotime");
            return (Criteria) this;
        }

        /**
         * And lastwrotime not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andLastwrotimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("LASTWROTIME <>", value, "lastwrotime");
            return (Criteria) this;
        }

        /**
         * And lastwrotime greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andLastwrotimeGreaterThan(Date value) {
            addCriterionForJDBCDate("LASTWROTIME >", value, "lastwrotime");
            return (Criteria) this;
        }

        /**
         * And lastwrotime greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andLastwrotimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("LASTWROTIME >=", value, "lastwrotime");
            return (Criteria) this;
        }

        /**
         * And lastwrotime less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andLastwrotimeLessThan(Date value) {
            addCriterionForJDBCDate("LASTWROTIME <", value, "lastwrotime");
            return (Criteria) this;
        }

        /**
         * And lastwrotime less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andLastwrotimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("LASTWROTIME <=", value, "lastwrotime");
            return (Criteria) this;
        }

        /**
         * And lastwrotime in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andLastwrotimeIn(List<Date> values) {
            addCriterionForJDBCDate("LASTWROTIME in", values, "lastwrotime");
            return (Criteria) this;
        }

        /**
         * And lastwrotime not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andLastwrotimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("LASTWROTIME not in", values, "lastwrotime");
            return (Criteria) this;
        }

        /**
         * And lastwrotime between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andLastwrotimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("LASTWROTIME between", value1, value2, "lastwrotime");
            return (Criteria) this;
        }

        /**
         * And lastwrotime not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andLastwrotimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("LASTWROTIME not between", value1, value2, "lastwrotime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to
     * the database table sys_roles
     * 
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        /**
         * Instantiates a new criteria.
         */
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to
     * the database table sys_roles
     * 
     * @mbggenerated
     */
    public static class Criterion {

        /** The condition. */
        private String condition;

        /** The value. */
        private Object value;

        /** The second value. */
        private Object secondValue;

        /** The no value. */
        private boolean noValue;

        /** The single value. */
        private boolean singleValue;

        /** The between value. */
        private boolean betweenValue;

        /** The list value. */
        private boolean listValue;

        /** The type handler. */
        private String typeHandler;

        /**
         * Gets the condition.
         *
         * @return the condition
         */
        public String getCondition() {
            return condition;
        }

        /**
         * Gets the value.
         *
         * @return the value
         */
        public Object getValue() {
            return value;
        }

        /**
         * Gets the second value.
         *
         * @return the second value
         */
        public Object getSecondValue() {
            return secondValue;
        }

        /**
         * Checks if is no value.
         *
         * @return true, if is no value
         */
        public boolean isNoValue() {
            return noValue;
        }

        /**
         * Checks if is single value.
         *
         * @return true, if is single value
         */
        public boolean isSingleValue() {
            return singleValue;
        }

        /**
         * Checks if is between value.
         *
         * @return true, if is between value
         */
        public boolean isBetweenValue() {
            return betweenValue;
        }

        /**
         * Checks if is list value.
         *
         * @return true, if is list value
         */
        public boolean isListValue() {
            return listValue;
        }

        /**
         * Gets the type handler.
         *
         * @return the type handler
         */
        public String getTypeHandler() {
            return typeHandler;
        }

        /**
         * Instantiates a new criterion.
         *
         * @param condition the condition
         */
        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        /**
         * Instantiates a new criterion.
         *
         * @param condition the condition
         * @param value the value
         * @param typeHandler the type handler
         */
        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        /**
         * Instantiates a new criterion.
         *
         * @param condition the condition
         * @param value the value
         */
        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        /**
         * Instantiates a new criterion.
         *
         * @param condition the condition
         * @param value the value
         * @param secondValue the second value
         * @param typeHandler the type handler
         */
        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        /**
         * Instantiates a new criterion.
         *
         * @param condition the condition
         * @param value the value
         * @param secondValue the second value
         */
        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}
