package com.cmcc.ms.entity.system;

import java.util.ArrayList;
import java.util.List;



/**
 * The Class SysMenusExample.
 *
 * @author ldy
 */
public class SysMenusExample {
    /**
     * This field was generated by MyBatis Generator. This field corresponds to
     * the database table sys_menus
     * 
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator. This field corresponds to
     * the database table sys_menus
     * 
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator. This field corresponds to
     * the database table sys_menus
     * 
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     * 
     * @mbggenerated
     */
    public SysMenusExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     *
     * @param orderByClause the new order by clause
     * @mbggenerated 
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     *
     * @return the order by clause
     * @mbggenerated 
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     *
     * @param distinct the new distinct
     * @mbggenerated 
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     *
     * @return true, if is distinct
     * @mbggenerated 
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     *
     * @return the ored criteria
     * @mbggenerated 
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     *
     * @param criteria the criteria
     * @mbggenerated 
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     *
     * @return the criteria
     * @mbggenerated 
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     *
     * @return the criteria
     * @mbggenerated 
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     *
     * @return the criteria
     * @mbggenerated 
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table sys_menus
     * 
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to
     * the database table sys_menus
     * 
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {

        /** The criteria. */
        protected List<Criterion> criteria;

        /**
         * Instantiates a new generated criteria.
         */
        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        /**
         * Checks if is valid.
         *
         * @return true, if is valid
         */
        public boolean isValid() {
            return criteria.size() > 0;
        }

        /**
         * Gets the all criteria.
         *
         * @return the all criteria
         */
        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        /**
         * Gets the criteria.
         *
         * @return the criteria
         */
        public List<Criterion> getCriteria() {
            return criteria;
        }

        /**
         * Adds the criterion.
         *
         * @param condition the condition
         */
        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        /**
         * Adds the criterion.
         *
         * @param condition the condition
         * @param value the value
         * @param property the property
         */
        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        /**
         * Adds the criterion.
         *
         * @param condition the condition
         * @param value1 the value 1
         * @param value2 the value 2
         * @param property the property
         */
        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        /**
         * And menu id is null.
         *
         * @return the criteria
         */
        public Criteria andMenuIdIsNull() {
            addCriterion("MENU_ID is null");
            return (Criteria) this;
        }

        /**
         * And menu id is not null.
         *
         * @return the criteria
         */
        public Criteria andMenuIdIsNotNull() {
            addCriterion("MENU_ID is not null");
            return (Criteria) this;
        }

        /**
         * And menu id equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuIdEqualTo(Integer value) {
            addCriterion("MENU_ID =", value, "menuId");
            return (Criteria) this;
        }

        /**
         * And menu id not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuIdNotEqualTo(Integer value) {
            addCriterion("MENU_ID <>", value, "menuId");
            return (Criteria) this;
        }

        /**
         * And menu id greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuIdGreaterThan(Integer value) {
            addCriterion("MENU_ID >", value, "menuId");
            return (Criteria) this;
        }

        /**
         * And menu id greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("MENU_ID >=", value, "menuId");
            return (Criteria) this;
        }

        /**
         * And menu id less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuIdLessThan(Integer value) {
            addCriterion("MENU_ID <", value, "menuId");
            return (Criteria) this;
        }

        /**
         * And menu id less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuIdLessThanOrEqualTo(Integer value) {
            addCriterion("MENU_ID <=", value, "menuId");
            return (Criteria) this;
        }

        /**
         * And menu id in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andMenuIdIn(List<Integer> values) {
            addCriterion("MENU_ID in", values, "menuId");
            return (Criteria) this;
        }

        /**
         * And menu id not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andMenuIdNotIn(List<Integer> values) {
            addCriterion("MENU_ID not in", values, "menuId");
            return (Criteria) this;
        }

        /**
         * And menu id between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andMenuIdBetween(Integer value1, Integer value2) {
            addCriterion("MENU_ID between", value1, value2, "menuId");
            return (Criteria) this;
        }

        /**
         * And menu id not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andMenuIdNotBetween(Integer value1, Integer value2) {
            addCriterion("MENU_ID not between", value1, value2, "menuId");
            return (Criteria) this;
        }

        /**
         * And menu name is null.
         *
         * @return the criteria
         */
        public Criteria andMenuNameIsNull() {
            addCriterion("MENU_NAME is null");
            return (Criteria) this;
        }

        /**
         * And menu name is not null.
         *
         * @return the criteria
         */
        public Criteria andMenuNameIsNotNull() {
            addCriterion("MENU_NAME is not null");
            return (Criteria) this;
        }

        /**
         * And menu name equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuNameEqualTo(String value) {
            addCriterion("MENU_NAME =", value, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuNameNotEqualTo(String value) {
            addCriterion("MENU_NAME <>", value, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuNameGreaterThan(String value) {
            addCriterion("MENU_NAME >", value, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuNameGreaterThanOrEqualTo(String value) {
            addCriterion("MENU_NAME >=", value, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuNameLessThan(String value) {
            addCriterion("MENU_NAME <", value, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuNameLessThanOrEqualTo(String value) {
            addCriterion("MENU_NAME <=", value, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuNameLike(String value) {
            addCriterion("MENU_NAME like", value, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name not like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andMenuNameNotLike(String value) {
            addCriterion("MENU_NAME not like", value, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andMenuNameIn(List<String> values) {
            addCriterion("MENU_NAME in", values, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andMenuNameNotIn(List<String> values) {
            addCriterion("MENU_NAME not in", values, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andMenuNameBetween(String value1, String value2) {
            addCriterion("MENU_NAME between", value1, value2, "menuName");
            return (Criteria) this;
        }

        /**
         * And menu name not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andMenuNameNotBetween(String value1, String value2) {
            addCriterion("MENU_NAME not between", value1, value2, "menuName");
            return (Criteria) this;
        }

        /**
         * And parent id is null.
         *
         * @return the criteria
         */
        public Criteria andParentIdIsNull() {
            addCriterion("PARENT_ID is null");
            return (Criteria) this;
        }

        /**
         * And parent id is not null.
         *
         * @return the criteria
         */
        public Criteria andParentIdIsNotNull() {
            addCriterion("PARENT_ID is not null");
            return (Criteria) this;
        }

        /**
         * And parent id equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andParentIdEqualTo(Integer value) {
            addCriterion("PARENT_ID =", value, "parentId");
            return (Criteria) this;
        }

        /**
         * And parent id not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andParentIdNotEqualTo(Integer value) {
            addCriterion("PARENT_ID <>", value, "parentId");
            return (Criteria) this;
        }

        /**
         * And parent id greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andParentIdGreaterThan(Integer value) {
            addCriterion("PARENT_ID >", value, "parentId");
            return (Criteria) this;
        }

        /**
         * And parent id greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andParentIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("PARENT_ID >=", value, "parentId");
            return (Criteria) this;
        }

        /**
         * And parent id less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andParentIdLessThan(Integer value) {
            addCriterion("PARENT_ID <", value, "parentId");
            return (Criteria) this;
        }

        /**
         * And parent id less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andParentIdLessThanOrEqualTo(Integer value) {
            addCriterion("PARENT_ID <=", value, "parentId");
            return (Criteria) this;
        }

        /**
         * And parent id in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andParentIdIn(List<Integer> values) {
            addCriterion("PARENT_ID in", values, "parentId");
            return (Criteria) this;
        }

        /**
         * And parent id not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andParentIdNotIn(List<Integer> values) {
            addCriterion("PARENT_ID not in", values, "parentId");
            return (Criteria) this;
        }

        /**
         * And parent id between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andParentIdBetween(Integer value1, Integer value2) {
            addCriterion("PARENT_ID between", value1, value2, "parentId");
            return (Criteria) this;
        }

        /**
         * And parent id not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andParentIdNotBetween(Integer value1, Integer value2) {
            addCriterion("PARENT_ID not between", value1, value2, "parentId");
            return (Criteria) this;
        }

        /**
         * And depth is null.
         *
         * @return the criteria
         */
        public Criteria andDepthIsNull() {
            addCriterion("DEPTH is null");
            return (Criteria) this;
        }

        /**
         * And depth is not null.
         *
         * @return the criteria
         */
        public Criteria andDepthIsNotNull() {
            addCriterion("DEPTH is not null");
            return (Criteria) this;
        }

        /**
         * And depth equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andDepthEqualTo(Integer value) {
            addCriterion("DEPTH =", value, "depth");
            return (Criteria) this;
        }

        /**
         * And depth not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andDepthNotEqualTo(Integer value) {
            addCriterion("DEPTH <>", value, "depth");
            return (Criteria) this;
        }

        /**
         * And depth greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andDepthGreaterThan(Integer value) {
            addCriterion("DEPTH >", value, "depth");
            return (Criteria) this;
        }

        /**
         * And depth greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andDepthGreaterThanOrEqualTo(Integer value) {
            addCriterion("DEPTH >=", value, "depth");
            return (Criteria) this;
        }

        /**
         * And depth less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andDepthLessThan(Integer value) {
            addCriterion("DEPTH <", value, "depth");
            return (Criteria) this;
        }

        /**
         * And depth less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andDepthLessThanOrEqualTo(Integer value) {
            addCriterion("DEPTH <=", value, "depth");
            return (Criteria) this;
        }

        /**
         * And depth in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andDepthIn(List<Integer> values) {
            addCriterion("DEPTH in", values, "depth");
            return (Criteria) this;
        }

        /**
         * And depth not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andDepthNotIn(List<Integer> values) {
            addCriterion("DEPTH not in", values, "depth");
            return (Criteria) this;
        }

        /**
         * And depth between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andDepthBetween(Integer value1, Integer value2) {
            addCriterion("DEPTH between", value1, value2, "depth");
            return (Criteria) this;
        }

        /**
         * And depth not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andDepthNotBetween(Integer value1, Integer value2) {
            addCriterion("DEPTH not between", value1, value2, "depth");
            return (Criteria) this;
        }

        /**
         * And url is null.
         *
         * @return the criteria
         */
        public Criteria andUrlIsNull() {
            addCriterion("URL is null");
            return (Criteria) this;
        }

        /**
         * And url is not null.
         *
         * @return the criteria
         */
        public Criteria andUrlIsNotNull() {
            addCriterion("URL is not null");
            return (Criteria) this;
        }

        /**
         * And url equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andUrlEqualTo(String value) {
            addCriterion("URL =", value, "url");
            return (Criteria) this;
        }

        /**
         * And url not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andUrlNotEqualTo(String value) {
            addCriterion("URL <>", value, "url");
            return (Criteria) this;
        }

        /**
         * And url greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andUrlGreaterThan(String value) {
            addCriterion("URL >", value, "url");
            return (Criteria) this;
        }

        /**
         * And url greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andUrlGreaterThanOrEqualTo(String value) {
            addCriterion("URL >=", value, "url");
            return (Criteria) this;
        }

        /**
         * And url less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andUrlLessThan(String value) {
            addCriterion("URL <", value, "url");
            return (Criteria) this;
        }

        /**
         * And url less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andUrlLessThanOrEqualTo(String value) {
            addCriterion("URL <=", value, "url");
            return (Criteria) this;
        }

        /**
         * And url like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andUrlLike(String value) {
            addCriterion("URL like", value, "url");
            return (Criteria) this;
        }

        /**
         * And url not like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andUrlNotLike(String value) {
            addCriterion("URL not like", value, "url");
            return (Criteria) this;
        }

        /**
         * And url in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andUrlIn(List<String> values) {
            addCriterion("URL in", values, "url");
            return (Criteria) this;
        }

        /**
         * And url not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andUrlNotIn(List<String> values) {
            addCriterion("URL not in", values, "url");
            return (Criteria) this;
        }

        /**
         * And url between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andUrlBetween(String value1, String value2) {
            addCriterion("URL between", value1, value2, "url");
            return (Criteria) this;
        }

        /**
         * And url not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andUrlNotBetween(String value1, String value2) {
            addCriterion("URL not between", value1, value2, "url");
            return (Criteria) this;
        }

        /**
         * And type is null.
         *
         * @return the criteria
         */
        public Criteria andTypeIsNull() {
            addCriterion("TYPE is null");
            return (Criteria) this;
        }

        /**
         * And type is not null.
         *
         * @return the criteria
         */
        public Criteria andTypeIsNotNull() {
            addCriterion("TYPE is not null");
            return (Criteria) this;
        }

        /**
         * And type equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andTypeEqualTo(Integer value) {
            addCriterion("TYPE =", value, "type");
            return (Criteria) this;
        }

        /**
         * And type not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andTypeNotEqualTo(Integer value) {
            addCriterion("TYPE <>", value, "type");
            return (Criteria) this;
        }

        /**
         * And type greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andTypeGreaterThan(Integer value) {
            addCriterion("TYPE >", value, "type");
            return (Criteria) this;
        }

        /**
         * And type greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andTypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("TYPE >=", value, "type");
            return (Criteria) this;
        }

        /**
         * And type less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andTypeLessThan(Integer value) {
            addCriterion("TYPE <", value, "type");
            return (Criteria) this;
        }

        /**
         * And type less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andTypeLessThanOrEqualTo(Integer value) {
            addCriterion("TYPE <=", value, "type");
            return (Criteria) this;
        }

        /**
         * And type in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andTypeIn(List<Integer> values) {
            addCriterion("TYPE in", values, "type");
            return (Criteria) this;
        }

        /**
         * And type not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andTypeNotIn(List<Integer> values) {
            addCriterion("TYPE not in", values, "type");
            return (Criteria) this;
        }

        /**
         * And type between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andTypeBetween(Integer value1, Integer value2) {
            addCriterion("TYPE between", value1, value2, "type");
            return (Criteria) this;
        }

        /**
         * And type not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andTypeNotBetween(Integer value1, Integer value2) {
            addCriterion("TYPE not between", value1, value2, "type");
            return (Criteria) this;
        }

        /**
         * And img is null.
         *
         * @return the criteria
         */
        public Criteria andImgIsNull() {
            addCriterion("IMG is null");
            return (Criteria) this;
        }

        /**
         * And img is not null.
         *
         * @return the criteria
         */
        public Criteria andImgIsNotNull() {
            addCriterion("IMG is not null");
            return (Criteria) this;
        }

        /**
         * And img equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andImgEqualTo(String value) {
            addCriterion("IMG =", value, "img");
            return (Criteria) this;
        }

        /**
         * And img not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andImgNotEqualTo(String value) {
            addCriterion("IMG <>", value, "img");
            return (Criteria) this;
        }

        /**
         * And img greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andImgGreaterThan(String value) {
            addCriterion("IMG >", value, "img");
            return (Criteria) this;
        }

        /**
         * And img greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andImgGreaterThanOrEqualTo(String value) {
            addCriterion("IMG >=", value, "img");
            return (Criteria) this;
        }

        /**
         * And img less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andImgLessThan(String value) {
            addCriterion("IMG <", value, "img");
            return (Criteria) this;
        }

        /**
         * And img less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andImgLessThanOrEqualTo(String value) {
            addCriterion("IMG <=", value, "img");
            return (Criteria) this;
        }

        /**
         * And img like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andImgLike(String value) {
            addCriterion("IMG like", value, "img");
            return (Criteria) this;
        }

        /**
         * And img not like.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andImgNotLike(String value) {
            addCriterion("IMG not like", value, "img");
            return (Criteria) this;
        }

        /**
         * And img in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andImgIn(List<String> values) {
            addCriterion("IMG in", values, "img");
            return (Criteria) this;
        }

        /**
         * And img not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andImgNotIn(List<String> values) {
            addCriterion("IMG not in", values, "img");
            return (Criteria) this;
        }

        /**
         * And img between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andImgBetween(String value1, String value2) {
            addCriterion("IMG between", value1, value2, "img");
            return (Criteria) this;
        }

        /**
         * And img not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andImgNotBetween(String value1, String value2) {
            addCriterion("IMG not between", value1, value2, "img");
            return (Criteria) this;
        }

        /**
         * And sort is null.
         *
         * @return the criteria
         */
        public Criteria andSortIsNull() {
            addCriterion("SORT is null");
            return (Criteria) this;
        }

        /**
         * And sort is not null.
         *
         * @return the criteria
         */
        public Criteria andSortIsNotNull() {
            addCriterion("SORT is not null");
            return (Criteria) this;
        }

        /**
         * And sort equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andSortEqualTo(Integer value) {
            addCriterion("SORT =", value, "sort");
            return (Criteria) this;
        }

        /**
         * And sort not equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andSortNotEqualTo(Integer value) {
            addCriterion("SORT <>", value, "sort");
            return (Criteria) this;
        }

        /**
         * And sort greater than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andSortGreaterThan(Integer value) {
            addCriterion("SORT >", value, "sort");
            return (Criteria) this;
        }

        /**
         * And sort greater than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andSortGreaterThanOrEqualTo(Integer value) {
            addCriterion("SORT >=", value, "sort");
            return (Criteria) this;
        }

        /**
         * And sort less than.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andSortLessThan(Integer value) {
            addCriterion("SORT <", value, "sort");
            return (Criteria) this;
        }

        /**
         * And sort less than or equal to.
         *
         * @param value the value
         * @return the criteria
         */
        public Criteria andSortLessThanOrEqualTo(Integer value) {
            addCriterion("SORT <=", value, "sort");
            return (Criteria) this;
        }

        /**
         * And sort in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andSortIn(List<Integer> values) {
            addCriterion("SORT in", values, "sort");
            return (Criteria) this;
        }

        /**
         * And sort not in.
         *
         * @param values the values
         * @return the criteria
         */
        public Criteria andSortNotIn(List<Integer> values) {
            addCriterion("SORT not in", values, "sort");
            return (Criteria) this;
        }

        /**
         * And sort between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andSortBetween(Integer value1, Integer value2) {
            addCriterion("SORT between", value1, value2, "sort");
            return (Criteria) this;
        }

        /**
         * And sort not between.
         *
         * @param value1 the value 1
         * @param value2 the value 2
         * @return the criteria
         */
        public Criteria andSortNotBetween(Integer value1, Integer value2) {
            addCriterion("SORT not between", value1, value2, "sort");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to
     * the database table sys_menus
     * 
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        /**
         * Instantiates a new criteria.
         */
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator. This class corresponds to
     * the database table sys_menus
     * 
     * @mbggenerated
     */
    public static class Criterion {

        /** The condition. */
        private String condition;

        /** The value. */
        private Object value;

        /** The second value. */
        private Object secondValue;

        /** The no value. */
        private boolean noValue;

        /** The single value. */
        private boolean singleValue;

        /** The between value. */
        private boolean betweenValue;

        /** The list value. */
        private boolean listValue;

        /** The type handler. */
        private String typeHandler;

        /**
         * Gets the condition.
         *
         * @return the condition
         */
        public String getCondition() {
            return condition;
        }

        /**
         * Gets the value.
         *
         * @return the value
         */
        public Object getValue() {
            return value;
        }

        /**
         * Gets the second value.
         *
         * @return the second value
         */
        public Object getSecondValue() {
            return secondValue;
        }

        /**
         * Checks if is no value.
         *
         * @return true, if is no value
         */
        public boolean isNoValue() {
            return noValue;
        }

        /**
         * Checks if is single value.
         *
         * @return true, if is single value
         */
        public boolean isSingleValue() {
            return singleValue;
        }

        /**
         * Checks if is between value.
         *
         * @return true, if is between value
         */
        public boolean isBetweenValue() {
            return betweenValue;
        }

        /**
         * Checks if is list value.
         *
         * @return true, if is list value
         */
        public boolean isListValue() {
            return listValue;
        }

        /**
         * Gets the type handler.
         *
         * @return the type handler
         */
        public String getTypeHandler() {
            return typeHandler;
        }

        /**
         * Instantiates a new criterion.
         *
         * @param condition the condition
         */
        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        /**
         * Instantiates a new criterion.
         *
         * @param condition the condition
         * @param value the value
         * @param typeHandler the type handler
         */
        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        /**
         * Instantiates a new criterion.
         *
         * @param condition the condition
         * @param value the value
         */
        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        /**
         * Instantiates a new criterion.
         *
         * @param condition the condition
         * @param value the value
         * @param secondValue the second value
         * @param typeHandler the type handler
         */
        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        /**
         * Instantiates a new criterion.
         *
         * @param condition the condition
         * @param value the value
         * @param secondValue the second value
         */
        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}
